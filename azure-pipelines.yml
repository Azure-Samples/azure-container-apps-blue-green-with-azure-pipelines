# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  # Trigger pipeline on commits to main branch
- main

variables:
  # Ubuntu-latest image is used for building and deploying the app
  vmImageName: 'ubuntu-latest'

stages:
- stage: Deploy_Container_Apps_in_Blue_Green_Environment 
  displayName: Deploy Container Apps in Blue_Green Environment
  jobs:
  - job: Build # Build the app and run tests
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '16.x'
        displayName: 'Install Node.js'

      - task: Npm@1
        displayName: Install
        inputs:
          command: 'install'
          workingDir: 'src'
          verbose: true
      - task: Npm@1
        displayName: Test
        inputs:
          workingDir: 'src'
          command: custom
          verbose: false
          customCommand: test

      - task: reportgenerator@5
        condition: succeededOrFailed()
        displayName: Converting lcov to cobertura
        inputs:
          reports: 'src/coverage/lcov.info' 
          targetdir: 'coverage/'  
          reporttypes: 'Cobertura'
      - task: PublishCodeCoverageResults@2
        inputs:
          summaryFileLocation: 'coverage/Cobertura.xml'

      - task: Docker@2 # Build and push image to Docker Hub
        inputs:
          containerRegistry: 'dockerRegistryServiceConnection'
          repository: '$(DOCKER_REPOSITORY)'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
  - job: Deploy # Deploy the app to non-production environment - in this case what we call the blue environment
    dependsOn: Build
    displayName: Deploy to Non_production environment
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: Set Production Label, Blue Commit and Green Commit
      name: setvarStep1
      inputs:    
        azureSubscription: 'azureSubscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
              #!/bin/sh
              ## Get the current tags from the container app
              tags=$(az containerapp show -g $RESOURCE_GROUP -n $API_NAME --query tags -o json | tr -d '\r\n') 
              ## Get the current production label from the tags
              productionLabel=$(echo $tags | jq -r '.productionLabel')
              ## Get the current blue and green commit IDs from the tags
              current_blueCommitID=$(echo $tags | jq -r '.blueCommitID')
              current_greenCommitID=$(echo $tags | jq -r '.greenCommitID')
              echo "Current Production Label: $productionLabel"
              echo $productionLabel
              echo "Blue Commit ID: $current_blueCommitID"
              echo " Green Commit ID: $current_greenCommitID"
              ## Set variables for using in other tasks 
              echo "##vso[task.setvariable variable=productionLabel;isOutput=true]$productionLabel" ## Set variable for using in other tasks.
              echo "##vso[task.setvariable variable=current_blueCommitID;isOutput=true]$current_blueCommitID" ## Set variable for using in other tasks.
              echo "##vso[task.setvariable variable=current_greenCommitID;isOutput=true]$current_greenCommitID" ## Set variable for using in other tasks.
              
    - script: |
          ## Get the latest commit ID from the source code
          echo $sourceVersion
          commitHash=${sourceVersion:0:7}
          echo $commitHash
          echo "##vso[task.setvariable variable=commitHash;isOutput=true]$commitHash" ## Set variable for using in other tasks

          ## If the production label is empty, then set it to blue and set the blue commit to  latest commit ID and green commit to empty
          if [[ productionLabel == '' ]];
          then
              echo "##vso[task.setvariable variable=productionLabel;isOutput=truel;]blue" ## Set variable for using in other tasks.
              echo "##vso[task.setvariable variable=blueCommitID;isOutput=true]$commitHash" ## Set variable for using in other tasks.
              echo "$commitHash"
              echo "##vso[task.setvariable variable=greenCommitID;isOutput=true]" ## Set variable for using in other tasks.
              exit 0
          else  
              ## If the production label is blue, then  set the blue commit to the current blueCommitID otherwise set it to the latest commit
              blueCommitID=$([[ $productionLabel = 'blue' ]] && echo "$current_blueCommitID" || echo "$commitHash")
              echo "New blue Commit ID: $blueCommitID"
              ## If the production label is green, then  set the green commit to the current greenCommitID otherwise set it to the latest commit
              greenCommitID=$([[ $productionLabel = 'green' ]] && echo "$current_greenCommitID" || echo "$commitHash")
              echo "New green Commit ID: $greenCommitID"
              echo "##vso[task.setvariable variable=productionLabel;isOutput=true]$productionLabel" ## Set variable for using in other tasks.
              echo "##vso[task.setvariable variable=blueCommitID;isOutput=true]$blueCommitID" ## Set variable for using in other tasks.
              echo "##vso[task.setvariable variable=greenCommitID;isOutput=true]$greenCommitID" ## Set variable for using in other tasks.
          fi
      name: setvarStep
      env: { sourceVersion: $(Build.SourceVersion), productionLabel: $(setvarStep1.productionLabel), current_blueCommitID: $(setvarStep1.current_blueCommitID), current_greenCommitID: $(setvarStep1.current_greenCommitID) }
      displayName: 'Set new production label and Blue Commits and Green Commits '

    - task: AzureResourceManagerTemplateDeployment@3
      displayName: Deploy the container app to new environment and send 0% traffic to it
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'azureSubscription'
        subscriptionId: '$(SUBSCRIPTIONID)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(RESOURCE_GROUP)'
        location: '$(LOCATION)'
        templateLocation: 'Linked artifact'
        csmFile: 'main.bicep'
        overrideParameters: '-appName $(API_NAME) -containerAppsEnvironmentName $(ENVIRONMENT) -registryUsername $(REGISTRY_USERNAME) -registryPassword $(REGISTRY_PASSWORD) -productionLabel $(setvarStep.productionLabel) -latestCommitId $(setvarStep.commitHash) -buildID $(Build.BuildId) -blueCommitID $(setvarStep.blueCommitID) -greenCommitID $(setvarStep.greenCommitID)'
        deploymentMode: 'Incremental'
        deploymentName: 'DeployPipelineTemplate'
  - job: waitForValidation
    dependsOn: Deploy
    displayName: Validate deployed application is running successfully in new environment  
    pool: server
    timeoutInMinutes: 4320 # job times out in 3 days
    steps:   
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        notifyUsers: '$(NOTIFICATIONEMAIL)'
        instructions: 'Please validate the deployment before moving to production'
        onTimeout: 'resume'
  - job: deployToProduction
    dependsOn:
      - waitForValidation
      - Deploy
    variables:  
      myVarproductionLabel: $[ dependencies.Deploy.outputs['setvarStep.productionLabel'] ]  
      myVarcommitHash: $[ dependencies.Deploy.outputs['setvarStep.commitHash'] ]
      myVarblueCommitID: $[ dependencies.Deploy.outputs['setvarStep.blueCommitID'] ]
      myVargreenCommitID: $[ dependencies.Deploy.outputs['setvarStep.greenCommitID'] ]
    displayName: Deploy to production and send 100% traffic to new environement
    pool:
      vmImage: $(vmImageName)
    steps:

    - script: |  
            newProductionLabel=$([[ $myVarproductionLabel = 'blue' ]] && echo 'green' || echo 'blue')
            echo "$newProductionLabel"
            echo "##vso[task.setvariable variable=newProductionLabel]$newProductionLabel"
            echo "Blue Commit ID: $myVarblueCommitID"
            echo " Green Commit ID: $myVargreenCommitID"
            echo " Latest Commit: $myVarcommitHash"
            echo " New production label: $newProductionLabel"
      displayName: 'Set Variables for new environment' 
    - task: AzureResourceManagerTemplateDeployment@3 # Switch traffic to new environment and send 100% traffic to it 
      displayName: Switch traffic to 100% to new environment
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'azureSubscription'
        subscriptionId: '$(SUBSCRIPTIONID)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(RESOURCE_GROUP)'
        location: '$(LOCATION)'
        templateLocation: 'Linked artifact'
        csmFile: 'main.bicep'
        overrideParameters: '-appName $(API_NAME) -containerAppsEnvironmentName $(ENVIRONMENT) -registryUsername $(REGISTRY_USERNAME) -registryPassword $(REGISTRY_PASSWORD) -productionLabel $(newProductionLabel) -latestCommitId $(myVarcommitHash) -buildID $(Build.BuildId) -blueCommitID $(myVarblueCommitID) -greenCommitID $(myVargreenCommitID)'
        deploymentMode: 'Incremental'
        deploymentName: 'DeployPipelineTemplate'